generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String           @id
  name           String
  email          String
  emailVerified  Boolean
  image          String?
  createdAt      DateTime
  updatedAt      DateTime
  sessions       Session[]
  accounts       Account[]
  courses        Course[]
  lessonProgress LessonProgress[]

  role       String?
  banned     Boolean?
  banReason  String?
  banExpires DateTime?

  enrollment Enrollment[]

  stripeCustomerId String? @unique

  @@unique([email])
  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  impersonatedBy String?

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model Course {
  id               String        @id @default(uuid())
  title            String
  description      String
  fileKey          String
  price            Int
  duration         Int
  level            COURSE_LEVEL  @default(BEGINNER)
  category         String
  smallDescription String
  slug             String        @unique
  status           COURSE_STATUS @default(DRAFT)
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt()
  userId           String
  user             User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  chapter          Chapter[]
  enrollment       Enrollment[]

  stripePriceId String @unique()
}

model Chapter {
  id        String   @id @default(uuid())
  title     String
  position  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()

  courseId String
  course   Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  lessons  Lesson[]

  @@map("chapters")
}

model Lesson {
  id           String   @id @default(uuid())
  title        String
  description  String?
  thumbnailUrl String?
  videoKey     String?
  position     Int
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt()
  chapterId    String
  chapter      Chapter  @relation(fields: [chapterId], references: [id], onDelete: Cascade)

  lessonProgress LessonProgress[]

  @@map("lessons")
}

model Enrollment {
  id       String               @id @default(uuid())
  amount   Int
  status   EnrollmentStatusType @default(PENDING)
  courseId String
  course   Course               @relation(fields: [courseId], references: [id], onDelete: Cascade)
  userId   String
  user     User                 @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()

  @@unique([userId, courseId])
}

model LessonProgress {
  id String @id @default(ulid())

  completed Boolean @default(false)

  User     User?   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId   String?
  Lesson   Lesson? @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  lessonId String?

  @@unique([userId, lessonId])
}

enum EnrollmentStatusType {
  PENDING
  ACTIVE
  CANCELLED
}

enum COURSE_LEVEL {
  BEGINNER
  INTERMIDIATE
  ADVANCE
}

enum COURSE_STATUS {
  DRAFT
  PUBLISHED
  ARCHIVED
}
